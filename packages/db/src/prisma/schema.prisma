// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins", "omitApi"]
}

generator json {
    provider = "prisma-json-types-generator"
}

generator zod {
    provider = "zod-prisma-types"
    output   = "../../../schemas/src/prisma"

    createInputTypes       = false
    addInputTypeValidation = false
    addIncludeType         = false
    addSelectType          = false
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL")
}

// ----- USERS
model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Roles     @default(USER)

    accounts  Account[]
    sessions  Session[]
    profile   UserProfile?
    settings  UserSetting?
    library   UserLibrary?
    history   UserHistory[]
    followers User[]        @relation("UserFollow")
    following User[]        @relation("UserFollow")

    // These exist solely to satisfy Prisma's "relations must be defined on both sides" rule
    createdMedias         Media[]
    uploadedMediaCovers   MediaCover[]
    uploadedMediaBanners  MediaBanner[]
    createdMediaTitles    MediaTitle[]
    createdMediaTrackers  MediaTracker[]
    uploadedMediaChapters MediaChapter[]
    mediaChapterComments  MediaChapterComment[]
    createdScans          Scan[]
    scanMembers           ScanMember[]

    @@index([id])
}

model UserProfile {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    banner    String?
    birthDate DateTime?
    gender    Genders    @default(NOT_SPECIFIED)
    city      String?
    country   Countries?
    about     String?
    points    Int        @default(0)

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
}

model UserSetting {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    contentRating   ContentRating @default(NSFL)
    preferredTitles Languages?
    showFollowing   Boolean       @default(true)
    showLibrary     Boolean       @default(true)
    homeLayout      HomeLayout    @default(ROWS)

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

model UserLibrary {
    /// [UserLibraryEntry]
    reading    Json[] @default([])
    /// [UserLibraryEntry]
    rereading  Json[] @default([])
    /// [UserLibraryEntry]
    planToRead Json[] @default([])
    /// [UserLibraryEntry]
    completed  Json[] @default([])
    /// [UserLibraryEntry]
    onHold     Json[] @default([])
    /// [UserLibraryEntry]
    dropped    Json[] @default([])

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

model UserHistory {
    /// [UserHistoryProgression]
    progression Json[]

    media   Media  @relation(fields: [mediaId], references: [id])
    mediaId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@unique([mediaId, userId])
}

model Account {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type          String
    refresh_token String?
    access_token  String?
    expires_at    Int?
    token_type    String?
    scope         String?
    id_token      String?
    session_state String?

    provider          String
    providerAccountId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// ----- MEDIAS
model Media {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    startDate DateTime?
    endDate   DateTime?

    synopsis        String?
    contentRating   ContentRating        @default(NORMAL)
    oneShot         Boolean              @default(false)
    trailer         String?
    type            MediaType
    status          MediaStatus
    source          MediaSource
    demography      MediaDemography
    countryOfOrigin MediaCountryOfOrigin
    genres          MediaGenres[]
    /// [MediaTag]
    tags            Json[]
    flag            Flag                 @default(OK)

    covers   MediaCover[]
    banners  MediaBanner[]
    titles   MediaTitle[]
    trackers MediaTracker[]
    chapters MediaChapter[]
    history  UserHistory[]

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model MediaCover {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    volume        Int?
    contentRating ContentRating @default(NORMAL)
    isMainCover   Boolean       @default(false)
    language      Languages

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    uploader   User    @relation(fields: [uploaderId], references: [id])
    uploaderId String
    deleterId  String?
}

model MediaBanner {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    contentRating ContentRating @default(NORMAL)

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    uploader   User    @relation(fields: [uploaderId], references: [id])
    uploaderId String
    deleterId  String?
}

model MediaTitle {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    title       String
    language    Languages
    priority    Int
    isAcronym   Boolean   @default(false)
    isMainTitle Boolean   @default(false)

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?

    @@unique([mediaId, language, priority], name: "MediaTitlePriority")
}

model MediaTracker {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    tracker    Trackers
    externalId String

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model MediaChapter {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    title         String?
    number        Float
    volume        Float?
    language      Languages
    /// [MediaChapterPage]
    pages         Json[]
    contentRating ContentRating @default(NORMAL)
    flag          Flag          @default(OK)

    scans    Scan[]
    comments MediaChapterComment[]

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    uploader   User    @relation(fields: [uploaderId], references: [id])
    uploaderId String
    deleterId  String?
}

model MediaChapterComment {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    content     String
    /// [MediaCommentAttachement]
    attachments Json[]

    replies MediaChapterComment[] @relation("ParentComment")

    parent   MediaChapterComment? @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade)
    parentId String?

    mediaChapter   MediaChapter @relation(fields: [mediaChapterId], references: [id], onDelete: Cascade)
    mediaChapterId String

    user      User    @relation(fields: [userId], references: [id])
    userId    String
    deleterId String?
}

// ---- SCANS
model Scan {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    name        String
    description String?

    logo   String?
    banner String?

    website   String?
    discord   String?
    twitter   String?
    facebook  String?
    instagram String?
    telegram  String?
    youtube   String?
    email     String?

    chapters MediaChapter[]
    members  ScanMember[]

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model ScanMember {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    roles       ScanMemberRoles[]
    permissions ScanMemberPermissions[]

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    scans Scan[]
}

// ---- TASKS
model Task {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type    TaskType
    status  TaskStatus
    /// [TaskPayload]
    payload Json

    sessionId String
}

// ----- ENUMS
enum Roles {
    USER
    MODERATOR
    UPLOADER_INTERN
    UPLOADER
    ADMIN
}

enum Genders {
    MALE
    FEMALE
    OTHER
    NOT_SPECIFIED
}

enum HomeLayout {
    ROWS
    COLUMNS
}

enum ContentRating {
    NORMAL
    SUGGESTIVE
    NSFW
    NSFL
}

enum Flag {
    OK
    STAFF_ONLY
    VIP_ONLY
    LOCKED
}

enum MediaType {
    MANGA
    MANHWA
    MANHUA
    LIGHT_NOVEL
    OTHER
}

enum MediaStatus {
    RELEASING
    FINISHED
    NOT_YET_RELEASED
    CANCELLED
    HIATUS
}

enum MediaSource {
    ORIGINAL
    LIGHT_NOVEL
    VISUAL_NOVEL
    WEB_NOVEL
    VIDEO_GAME
}

enum MediaDemography {
    SHOUNEN
    SHOUJO
    SEINEN
    JOSEI
}

enum MediaCountryOfOrigin {
    JAPAN
    KOREA
    CHINA
    USA
    FRANCE
    BRAZIL
}

enum MediaGenres {
    ACTION
    ADVENTURE
    COMEDY
    DRAMA
    ECCHI
    FANTASY
    HENTAI
    HORROR
    MAHOU_SHOUJO
    MECHA
    MUSIC
    MYSTERY
    PSYCHOLOGICAL
    ROMANCE
    SCI_FI
    SLICE_OF_LIFE
    SPORTS
    SUPERNATURAL
    THRILLER
}

enum Trackers {
    MANGADEX
    MYANIMELIST
    ANILIST
}

enum ScanMemberRoles {
    OWNER
    ADMIN
    TRANSLATOR
    PROOFREADER
    CLEANER
    REDRAWER
    TYPESETTER
    QUALITY_CHECKER
    RAW_PROVIDER
    OTHER
}

enum ScanMemberPermissions {
    UPLOAD
    EDIT
    DELETE
}

enum TaskType {
    CREATE_MEDIA
    IMPORT_MEDIA
    IMPORT_COVER
    IMPORT_CHAPTER
    UPLOAD_CHAPTER
    UPLOAD_COVER
    UPLOAD_BANNER
}

enum TaskStatus {
    PENDING
    DOWNLOADING
    UPLOADING
    FINISHED
    FAILED
}

// ISO 639-1
enum Languages {
    ab // Abkhazian
    aa // Afar
    af // Afrikaans
    ak // Akan
    sq // Albanian
    am // Amharic
    ar // Arabic
    an // Aragonese
    hy // Armenian
    as // Assamese
    av // Avar
    ae // Avestan
    ay // Aymara
    az // Azerbaijani
    bm // Bambara
    ba // Bashkir
    eu // Basque
    be // Belarusian
    bn // Bengali
    bi // Bislama
    bs // Bosnian
    br // Breton
    bg // Bulgarian
    my // Burmese
    ca // Catalan
    ch // Chamorro
    ce // Chechen
    ny // Chichewa
    cu // Church Slavonic
    cv // Chuvash
    kw // Cornish
    co // Corsican
    cr // Cree
    hr // Croatian
    cs // Czech
    da // Danish
    dv // Dhivehi
    nl // Dutch
    dz // Dzongkha
    en // English
    eo // Esperanto
    et // Estonian
    ee // Ewe
    fo // Faroese
    fj // Fijian
    fi // Finnish
    fr // French
    fy // West Frisian
    ff // Fulah
    gd // Scottish Gaelic|Gaelic
    gl // Galician
    lg // Ganda
    ka // Georgian
    de // German
    el // Greek
    kl // Greenlandic
    gn // Guarani
    gu // Gujarati
    ht // Haitian Creole
    ha // Hausa
    he // Hebrew
    hz // Herero
    hi // Hindi
    ho // Hiri Motu
    hu // Hungarian
    is // Icelandic
    io // Ido (language)|Ido
    ig // Igbo
    id // Indonesian
    ia // Interlingua
    ie // Interlingue
    iu // Inuktitut
    ik // Inupiaq
    ga // Irish
    it // Italian
    jv // Javanese
    kn // Kannada
    kr // Kanuri
    ks // Kashmiri
    kk // Kazakh
    km // Central Khmer
    ki // Gikuyu
    rw // Kinyarwanda
    ky // Kirghiz
    kv // Komi
    kg // Kongo
    kj // Kuanyama
    ku // Kurdish
    lo // Lao
    la // Latin
    lv // Latvian
    li // Limburgan
    ln // Lingala
    lt // Lithuanian
    lu // Luba-Katanga
    lb // Luxembourgish
    mk // Macedonian
    mg // Malagasy
    ms // Malay
    ml // Malayalam
    mt // Maltese
    gv // Manx
    mi // Māori
    mr // Marathi
    mh // Marshallese
    mn // Mongolian
    na // Nauru
    nv // Navajo
    nd // North Ndebele
    nr // South Ndebele
    ng // Ndonga
    ne // Nepali
    no // Norwegian
    nb // Norwegian Bokmål
    nn // Norwegian Nynorsk
    ii // Sichuan Yi
    oc // Occitan
    oj // Ojibwa
    or // Oriya
    om // Oromo
    os // Ossetian
    pi // Pali
    ps // Pashto
    fa // Persian
    pl // Polish
    pa // Punjabi
    qu // Quechua
    ro // Romanian
    rm // Romansh
    rn // Rundi
    ru // Russian
    se // Northern Sami
    sm // Samoan
    sg // Sango
    sa // Sanskrit
    sc // Sardinian
    sr // Serbian
    sn // Shona
    sd // Sindhi
    si // Sinhala
    sk // Slovak
    sl // Slovene
    so // Somali
    st // Sotho
    su // Sundanese
    sw // Swahili
    ss // Swazi
    sv // Swedish
    tl // Tagalog
    ty // Tahitian
    tg // Tajik
    ta // Tamil
    tt // Tatar
    te // Telugu
    th // Thai
    bo // Tibetan
    ti // Tigrinya
    to // Tongan
    ts // Tsonga
    tn // Tswana
    tr // Turkish
    tk // Turkmen
    tw // Twi
    ug // Uighur
    uk // Ukrainian
    ur // Urdu
    uz // Uzbek
    ve // Venda
    vi // Vietnamese
    vo // Volapük
    wa // Walloon
    cy // Welsh
    wo // Wolof
    xh // Xhosa
    yi // Yiddish
    yo // Yoruba
    za // Zhuang
    zu // Zulu

    es // Castilian Spanish
    es_la // Latin American Spanish

    pt_br // Brazilian Portuguese
    pt_pt // European Portuguese

    ja // Japanese
    ja_ro // Japanese (romanized)

    ko // Korean
    ko_ro // Korean (romanized)

    zh // Chinese
    zh_hk // Chinese (Hong Kong)
    zh_ro // Chinese (romanized)
}

// FlagCDN supported
enum Countries {
    ad // Andorra
    ae // United Arab Emirates
    af // Afghanistan
    ag // Antigua and Barbuda
    ai // Anguilla
    al // Albania
    am // Armenia
    ao // Angola
    aq // Antarctica
    ar // Argentina
    as // American Samoa
    at // Austria
    au // Australia
    aw // Aruba
    ax // Åland Islands
    az // Azerbaijan
    ba // Bosnia and Herzegovina
    bb // Barbados
    bd // Bangladesh
    be // Belgium
    bf // Burkina Faso
    bg // Bulgaria
    bh // Bahrain
    bi // Burundi
    bj // Benin
    bl // Saint Barthélemy
    bm // Bermuda
    bn // Brunei
    bo // Bolivia
    bq // Caribbean Netherlands
    br // Brazil
    bs // Bahamas
    bt // Bhutan
    bv // Bouvet Island
    bw // Botswana
    by // Belarus
    bz // Belize
    ca // Canada
    cc // Cocos (Keeling) Islands
    cd // DR Congo
    cf // Central African Republic
    cg // Republic of the Congo
    ch // Switzerland
    ci // Côte d'Ivoire (Ivory Coast)
    ck // Cook Islands
    cl // Chile
    cm // Cameroon
    cn // China
    co // Colombia
    cr // Costa Rica
    cu // Cuba
    cv // Cape Verde
    cw // Curaçao
    cx // Christmas Island
    cy // Cyprus
    cz // Czechia
    de // Germany
    dj // Djibouti
    dk // Denmark
    dm // Dominica
    do // Dominican Republic
    dz // Algeria
    ec // Ecuador
    ee // Estonia
    eg // Egypt
    eh // Western Sahara
    er // Eritrea
    es // Spain
    et // Ethiopia
    fi // Finland
    fj // Fiji
    fk // Falkland Islands
    fm // Micronesia
    fo // Faroe Islands
    fr // France
    ga // Gabon
    gb // United Kingdom
    gd // Grenada
    ge // Georgia
    gf // French Guiana
    gg // Guernsey
    gh // Ghana
    gi // Gibraltar
    gl // Greenland
    gm // Gambia
    gn // Guinea
    gp // Guadeloupe
    gq // Equatorial Guinea
    gr // Greece
    gs // South Georgia
    gt // Guatemala
    gu // Guam
    gw // Guinea-Bissau
    gy // Guyana
    hk // Hong Kong
    hm // Heard Island and McDonald Islands
    hn // Honduras
    hr // Croatia
    ht // Haiti
    hu // Hungary
    id // Indonesia
    ie // Ireland
    il // Israel
    im // Isle of Man
    in // India
    io // British Indian Ocean Territory
    iq // Iraq
    ir // Iran
    is // Iceland
    it // Italy
    je // Jersey
    jm // Jamaica
    jo // Jordan
    jp // Japan
    ke // Kenya
    kg // Kyrgyzstan
    kh // Cambodia
    ki // Kiribati
    km // Comoros
    kn // Saint Kitts and Nevis
    kp // North Korea
    kr // South Korea
    kw // Kuwait
    ky // Cayman Islands
    kz // Kazakhstan
    la // Laos
    lb // Lebanon
    lc // Saint Lucia
    li // Liechtenstein
    lk // Sri Lanka
    lr // Liberia
    ls // Lesotho
    lt // Lithuania
    lu // Luxembourg
    lv // Latvia
    ly // Libya
    ma // Morocco
    mc // Monaco
    md // Moldova
    me // Montenegro
    mf // Saint Martin
    mg // Madagascar
    mh // Marshall Islands
    mk // North Macedonia
    ml // Mali
    mm // Myanmar
    mn // Mongolia
    mo // Macau
    mp // Northern Mariana Islands
    mq // Martinique
    mr // Mauritania
    ms // Montserrat
    mt // Malta
    mu // Mauritius
    mv // Maldives
    mw // Malawi
    mx // Mexico
    my // Malaysia
    mz // Mozambique
    na // Namibia
    nc // New Caledonia
    ne // Niger
    nf // Norfolk Island
    ng // Nigeria
    ni // Nicaragua
    nl // Netherlands
    no // Norway
    np // Nepal
    nr // Nauru
    nu // Niue
    nz // New Zealand
    om // Oman
    pa // Panama
    pe // Peru
    pf // French Polynesia
    pg // Papua New Guinea
    ph // Philippines
    pk // Pakistan
    pl // Poland
    pm // Saint Pierre and Miquelon
    pn // Pitcairn Islands
    pr // Puerto Rico
    ps // Palestine
    pt // Portugal
    pw // Palau
    py // Paraguay
    qa // Qatar
    re // Réunion
    ro // Romania
    rs // Serbia
    ru // Russia
    rw // Rwanda
    sa // Saudi Arabia
    sb // Solomon Islands
    sc // Seychelles
    sd // Sudan
    se // Sweden
    sg // Singapore
    sh // Saint Helena, Ascension and Tristan da Cunha
    si // Slovenia
    sj // Svalbard and Jan Mayen
    sk // Slovakia
    sl // Sierra Leone
    sm // San Marino
    sn // Senegal
    so // Somalia
    sr // Suriname
    ss // South Sudan
    st // São Tomé and Príncipe
    sv // El Salvador
    sx // Sint Maarten
    sy // Syria
    sz // Eswatini (Swaziland)
    tc // Turks and Caicos Islands
    td // Chad
    tf // French Southern and Antarctic Lands
    tg // Togo
    th // Thailand
    tj // Tajikistan
    tk // Tokelau
    tl // Timor-Leste
    tm // Turkmenistan
    tn // Tunisia
    to // Tonga
    tr // Turkey
    tt // Trinidad and Tobago
    tv // Tuvalu
    tw // Taiwan
    tz // Tanzania
    ua // Ukraine
    ug // Uganda
    um // United States Minor Outlying Islands
    us // United States
    uy // Uruguay
    uz // Uzbekistan
    va // Vatican City (Holy See)
    vc // Saint Vincent and the Grenadines
    ve // Venezuela
    vg // British Virgin Islands
    vi // United States Virgin Islands
    vn // Vietnam
    vu // Vanuatu
    wf // Wallis and Futuna
    ws // Samoa
    xk // Kosovo
    ye // Yemen
    yt // Mayotte
    za // South Africa
    zm // Zambia
    zw // Zimbabw
}
