// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator json {
    provider = "prisma-json-types-generator"
}

generator zod {
    provider = "zod-prisma-types"
    output   = "../src/lib/schemas/prisma"

    createInputTypes       = false
    addInputTypeValidation = false
    addIncludeType         = false
    addSelectType          = false
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

// ----- USERS
model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Roles     @default(USER)

    accounts Account[]
    sessions Session[]
    settings UserSetting?

    createdMedias         Media[]
    uploadedMediaCovers   MediaCover[]
    uploadedMediaBanners  MediaBanner[]
    createdMediaTitles    MediaTitle[]
    createdMediaTags      MediaTag[]
    createdMediaTrackers  MediaTracker[]
    uploadedMediaChapters MediaChapter[]
    mediaChapterComments  MediaChapterComment[]
    createdTags           Tag[]
    createdScans          Scan[]
    scanMembers           ScanMember[]
    uploadSessions        UploadSession[]

    @@index([id])
}

model UserSetting {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    birthDate              DateTime?
    gender                 Genders
    city                   String?
    country                String?
    about                  String?
    contentRating          ContentRating       @default(NSFL)
    preferredTitleLanguage MediaTitleLanguages @default(ENGLISH)

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

model Account {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type          String
    refresh_token String?
    access_token  String?
    expires_at    Int?
    token_type    String?
    scope         String?
    id_token      String?
    session_state String?

    provider          String
    providerAccountId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ----- MEDIAS
model Media {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    startDate DateTime?
    endDate   DateTime?

    synopsis        String?
    contentRating   ContentRating        @default(NORMAL)
    oneShot         Boolean              @default(false)
    trailer         String?
    type            MediaType
    status          MediaStatus
    source          MediaSource
    demography      MediaDemography
    countryOfOrigin MediaCountryOfOrigin
    flag            Flag                 @default(OK)

    covers   MediaCover[]
    banners  MediaBanner[]
    titles   MediaTitle[]
    tags     MediaTag[]
    trackers MediaTracker[]
    chapters MediaChapter[]

    creator   User?   @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model MediaCover {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    volume        Int?
    contentRating ContentRating @default(NORMAL)

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    uploader   User    @relation(fields: [uploaderId], references: [id])
    uploaderId String
    deleterId  String?
}

model MediaBanner {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    contentRating ContentRating @default(NORMAL)

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    uploader   User    @relation(fields: [uploaderId], references: [id])
    uploaderId String
    deleterId  String?
}

model MediaTitle {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    title     String
    language  MediaTitleLanguages
    isAcronym Boolean             @default(false)

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model MediaTag {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    isSpoiler Boolean @default(false)

    tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId String

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model MediaTracker {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    tracker    Trackers
    externalId String

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model MediaChapter {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    title         String?
    number        Int
    volume        Int?
    language      MediaChapterLanguages
    /// [MediaChapterPage]
    pages         Json[]
    contentRating ContentRating         @default(NORMAL)
    flag          Flag                  @default(OK)

    scans    Scan[]
    comments MediaChapterComment[]

    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId String

    uploader   User    @relation(fields: [uploaderId], references: [id])
    uploaderId String
    deleterId  String?
}

model MediaChapterComment {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    content     String
    /// [MediaCommentAttachement]
    attachments Json[]

    replies MediaChapterComment[] @relation("ParentComment")

    parent   MediaChapterComment? @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade)
    parentId String?

    mediaChapter   MediaChapter @relation(fields: [mediaChapterId], references: [id], onDelete: Cascade)
    mediaChapterId String

    user      User    @relation(fields: [userId], references: [id])
    userId    String
    deleterId String?
}

model Tag {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    name          String
    description   String?
    category      String
    contentRating ContentRating @default(NORMAL)

    alId Int

    mediaTags MediaTag[]

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model UploadSession {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    status UploadSessionStatus @default(UPLOADING)

    user   User   @relation(fields: [userId], references: [id])
    userId String

    mediaId        String
    mediaChapterId String
}

// ---- SCANS
model Scan {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    name        String
    description String?

    logo   String?
    banner String?

    website   String?
    discord   String?
    twitter   String?
    facebook  String?
    instagram String?
    telegram  String?
    youtube   String?
    email     String?

    chapters MediaChapter[]
    members  ScanMember[]

    creator   User    @relation(fields: [creatorId], references: [id])
    creatorId String
    deleterId String?
}

model ScanMember {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    roles       ScanMemberRoles[]
    permissions ScanMemberPermissions[]

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    scans Scan[]
}

// ----- ENUMS
enum Roles {
    USER
    MODERATOR
    UPLOADER_INTERN
    UPLOADER
    ADMIN
}

enum Genders {
    MALE
    FEMALE
    OTHER
}

enum ContentRating {
    NORMAL
    SUGGESTIVE
    NSFW
    NSFL
}

enum Flag {
    OK
    STAFF_ONLY
    VIP_ONLY
    LOCKED
}

enum MediaType {
    MANGA
    MANHWA
    MANHUA
    LIGHT_NOVEL
    OTHER
}

enum MediaStatus {
    RELEASING
    FINISHED
    NOT_YET_RELEASED
    CANCELLED
    HIATUS
}

enum MediaSource {
    ORIGINAL
    LIGHT_NOVEL
    VISUAL_NOVEL
    WEB_NOVEL
    VIDEO_GAME
}

enum MediaDemography {
    SHOUNEN
    SHOUJO
    SEINEN
    JOSEI
}

enum MediaCountryOfOrigin {
    JAPAN
    KOREA
    CHINA
    USA
    FRANCE
    BRAZIL
}

enum MediaTitleLanguages {
    ENGLISH
    JAPANESE
    KOREAN
    ROMAJI
    SPANISH
    PORTUGUESE
    FRENCH
    NATIVE
}

enum MediaChapterLanguages {
    ENGLISH
    JAPANESE
    SPANISH
    PORTUGUESE
    FRENCH
}

enum Trackers {
    MANGADEX
    MYANIMELIST
    ANILIST
}

enum ScanMemberRoles {
    OWNER
    ADMIN
    TRANSLATOR
    PROOFREADER
    CLEANER
    REDRAWER
    TYPESETTER
    QUALITY_CHECKER
    RAW_PROVIDER
    OTHER
}

enum ScanMemberPermissions {
    UPLOAD
    EDIT
    DELETE
}

enum UploadSessionStatus {
    UPLOADING
    PROCESSING
    FINISHED
    FAILED
}
